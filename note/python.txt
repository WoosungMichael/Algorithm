- 리스트 역순으로 정렬
    - arr.sort(reverse=True)

- 교집합과 합집합
    - union = list((set(arr1) | set(arr2)))
    - intersection = list((set(arr1) & set(arr2)))

- Immutable vs Mutable
    - Immutable : int, float, str, tuple
        변수에 상관없이 동일한 곳을 참조
    - Mutable : list, dict, set
        모든 객체를 각각 생성해서 참조

- 리스트 초기화
    - arr = [0 for i in range(arr_length)]
    - arr = [0] * 26
    - ex) 
            arr = [[0 for i in range(3)] * 5]
            print(arr)
            arr[1][1] = 1
            print(arr)
            print("========")
            arr2 = [[0 for i in range(3)]for j in range(5)]
            print(arr2)
            arr2[1][1] = 1
            print(arr2)

        =>
            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
            [[0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]]
            ========
            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
            [[0, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]

- 리스트 최빈값
    - from collections import Counter
    - 최빈값이 하나인 경우
        arr_1 = Counter(arr_2)
        val = arr_1.most_common(1)[0][0]

    - 최빈값이 여러개인 경우
        arr_1 = Counter(arr_2)
        cnt = arr_1.most_common()[0][1]
        arr = []
        for num in arr_1.most_common(): 
            if num[1] == cnt: 
                arr.append(num[0]) 

- 리스트 문자열 연결
    - str = ''.join(arr)

- 리스트 요소 지우기
    - del arr[i]
        i번째 인덱스 요소 삭제
    
    - arr.remove(i)
        - i라는 아이템 삭제(없으면 ValurError)
        - 주의점
            arr = [1, 2, 3, 4, 5]
            for i in arr:
                print(i, end = " ")
                arr.remove(i)
            실행시 : 1, 3, 5
            -> 삭제한 요소로 인해 인덱스에 변화가 생겨 의도한 바와 다르게 작동
        - 해결방법
            for i in arr[:]:
                print(i, end = " ")
                arr.remove(i)
            -> 삭제한 요소에 영향 없이 원하는 대로 for문 정상 작동

- 리스트로 스택 구현
    - stack.pop() : pop 구현

- 리스트 교집합 확인
    - intersection
        - set(s1) & set(s1)
        - s1.intersection(s2)
        - s1, s2는 set
        - 시간복잡도 : O(len(s)+len(t))

- 아스키코드
    - ord('a') = 97
    - chr(65) = A

- 문자열 대소문자 
    - 변환
        - str.upper()
        - str.lower()
    - 판별
        - str.isupper()
        - str.islower()

- 문자열 역순 출력
    - print(str[::-1])

- 파이썬 for문
    - 역순
        - for i in reversed(range(n)):
        - for i in range(n, 0, -1):

- 순열
    - from itertools import permutations 
    - items = ['1', '2', '3', '4', '5'] 
      list(permutations(items, 2)) 
      [('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '1'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '1'), ('3', '2'), ('3', '4'), ('3', '5'), ('4', '1'), ('4', '2'), ('4', '3'), ('4', '5'), ('5', '1'), ('5', '2'), ('5', '3'), ('5', '4')] 

- 조합
    - from itertools import combinations 
    - items = ['1', '2', '3', '4', '5'] 
      list(combinations(items, 2)) 
      [('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '4'), ('3', '5'), ('4', '5')]

- 중복 순열
    - from itertools import product
    - for i in product([1,2,3],'ab'):
        print(i, end=" ")
      (1, 'a') (1, 'b') (2, 'a') (2, 'b') (3, 'a') (3, 'b') 
    - tmp = list(product(arr, repeat=i))
        -> i개 뽑는 중복순열

- 진수 변환
    - num1 = int(num2, N)
        - num2 : string형
        - num1에 N진법 숫자 num2를 10진법으로 변환하여 저장
    - print(format(num1, 'b'))
        - num1을 2진수로 변환하여 출력

- XOR 연산
    - a와 b의 XOR 연산
        - a ^ b

- OR 연산
    - a와 b의 OR 연산
        - a | b

- 딕셔너리
    - {'name': 'pey', 'phone': '0119993323', 'birth': '1118'}
    - 관련 함수
        a.keys()
        a.values()
        a.items()
        a.clear()
        a.get('name')
    - 요소 삭제하기
        del a['name']
        
- random 라이브러리
    - random.choice()
        import random
        a = random.choice([1,2,3,4,5])
        리스트 중 하나 랜덤 리턴
    - random.sample()
        random.sample(range(10), k)
        range(10)에 속하는 요소 중 중복되지 않게 k개를 리스트 형식으로 리턴
    - random.shuffle()
        random.shuffle(seq)
        seq를 무작위로 섞어주는 함수 

- deque
    from collections import deque
    arr = deque()
    arr.pop()
    arr.popleft()
    arr.appendleft()

- 시간 초과 해결
    - import sys
      input = sys.stdin.readline
      해준 이후 코드 작성 -> input().strip()
    
    - 누적값 저장해둔 배열 
      2중 for문의 안쪽 배열 해결
      -> 반복 대신 index로 접근


- 파일 import
    - 하위 폴더에 있는 파일 import
        - Structure
            -folder1
            --aaa.py
            --bbb.py
            --folder2
            ---ccc.py

        - aaa.py에서 ccc.py 불러올 때
            from folder2 import ccc

    - 상위 폴더에 있는 파일 import
        - Structure
            -folder1
            --aaa.py
            --bbb.py
            --folder2
            ---ccc.py

        - ccc.py에서 aaa.py 불러올 때
            import sys, os
            sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
            import aaa

    - 다른 경로에 있는 파일 import
        - Structure
            -folder1
            --aaa.py
            --bbb.py
            --folder2
            ---ccc.py
            --folder3
            ---ddd.py

        - ccc.py에서 ddd.py 불러올 때
            import sys, os
            sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
            from folder3 import ddd

- 파일 입출력
    - 추가모드
        file = open("testtest.txt", "a")
        file.write(input()+"\n")
        file.close()